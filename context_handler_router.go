// generated by genrouter -type context -fntype Handler -keytype string .; DO NOT EDIT

package ddp

import (
	"errors"

	"golang.org/x/net/context"
)

func RegisterHandler(ctx context.Context, key string, val Handler) context.Context {
	mp, ok := ctx.Value(handlerRouterKey).(map[string]Handler)
	if !ok {
		mp = make(map[string]Handler)
	}
	mp[key] = val
	return context.WithValue(ctx, handlerRouterKey, mp)
}

func CallHandler(ctx context.Context, key string, msg *Message) error {
	r, ok := handlerfromContext(ctx, key)
	if !ok {
		return errors.New("Can't find route")
	}

	return r(ctx, msg)
}

type handlerRouterKeyType int

var handlerRouterKey handlerRouterKeyType

func handlerfromContext(ctx context.Context, key string) (Handler, bool) {
	mp, ok := ctx.Value(handlerRouterKey).(map[string]Handler)
	if !ok {
		return nil, false
	}

	r, ok := mp[key]

	if !ok {
		return nil, false
	}

	return r, true
}
